rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function student(schoolId) {
      return request.auth.token.email_verified && request.auth.token.school == schoolId;
    }
    function admin() {
      return request.auth.token.role == "owner" || request.auth.token.role == "admin";
    }
    // check if the user is an officer of this club and the specified permission bit is set
    // see schema.ts for more info
    function officer(clubId, permissionBit) {
      // basically (officerOf[clubId] & (1 << permissionBit)) != 0
      return clubId in request.auth.token.officerOf && int(request.auth.token.officerOf[clubId] / math.pow(2, permissionBit)) % 2 == 1;
    }
    function member(clubId) {
      return clubId in request.auth.token.memberOf;
    }
    function onlyChanged(keys) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(keys);
    }
    match /schools/{school_id} {
      // schools can only be created/deleted from the admin API
      allow read: if student(school_id);
      // Members/admins/owner updates can only be done through the admin API (requires changing roles)
      allow update: if student(school_id) && admin() && onlyChanged(["name", "website", "domainRestriction"]);

      match /clubs/{club_id} {   
        // stuco can create, edit, and delete
        allow delete: if admin() && student(school_id);
        allow create: if admin() && student(school_id) &&
          request.resource.data.keys().toSet() == ["name", "description", "contact", "signup"].toSet();
        // officers can edit fields (permission bit 5 - ClubDetails)
        allow update: if student(school_id) && (admin() || officer(club_id, 5)) &&
          onlyChanged(["name", "description", "contact", "logoUrl", "topics", "meetings", "signup"]);
        // signup.type == 0 indicates private
        allow read: if student(school_id) && (("signup" in resource.data && resource.data.signup.type != 0) || request.auth.token.email.toUtf8().toBase64() in resource.data.officers || admin());

        match /messages/{message_id} {
          // permission bit 3 - Messages
          allow create: if student(school_id) && officer(club_id, 3) && request.resource.data.keys.hasOnly(["timestamp", "message", "sender"]);
          allow read: if student(school_id) && member(club_id);
        }
      }

      match /clubs_private/{club_id} {
        // permission bit 1 - Members
        allow read: if student(school_id) && officer(club_id, 1);
        // can only be written by backend
      }
    }
  }
}
